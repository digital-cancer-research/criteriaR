usethis::use_gpl3_license()
usethis::use_package("dplyr")
usethis::use_package("tibble")
usethis::use_package("purrr")
usethis::use_package("jsonlite")
devtools::document()
devtools::check()
usethis::use_package(c("DBI", "RSQLite", "httr", "quanteda", "readr", "yaml"))
usethis::use_package(list(c("DBI", "RSQLite", "httr", "quanteda", "readr", "yaml")))
usethis::use_package("DBI")
usethis::use_package("RSQLite")
usethis::use_package("httr")
usethis::use_package("quanteda")
usethis::use_package("readr")
usethis::use_package("yaml")
devtools::check()
devtools::load_all("~/Documents/GitHub/nciTools")
warnings()
devtools::load_all("~/Documents/GitHub/nciTools")
devtools::load_all("~/Documents/GitHub/criteriaR")
nciTools::loadThesaurus()
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all("~/Documents/GitHub/nciTools")
devtools::load_all("~/Documents/GitHub/criteriaR")
devtools::document("~/Documents/GitHub/nciTools")
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all("~/Documents/GitHub/nciTools")
devtools::load_all("~/Documents/GitHub/criteriaR")
NCIt_path = nciTools::loadThesaurus()
NCIt = nciTools::processThesaurus(thesaurus_file = NCIt_path)
NCIt_path
file.exists(NCIt_path)
NCIt = nciTools::processThesaurus(thesaurus_file = NCIt_path)
## create a new SQLIte DB in Documents folder
db_path = "~/Documents/test_db"
sqlite_con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
## save thesaurus to DB
nciTools::saveThesaurus(thesaurus_processed = NCIt, db_connection = sqlite_con)
## create dictionaries
dictionaries = nciTools::createDictionaries(thesaurus = NCIt$thesaurus)
# dictionaries is a named list of dictionaries with elements
# cancer_dict, drug_dict, gene_dict, alteration_dict
config <- yaml::read_yaml("~/Documents/GitHub/cancer_trial_recommender/config/config.yaml")
trial_data = CancerTrialAnnotation::downloadTrialData(config = config)
names(trial_data)
?criteriaR::compose_trial_json
criteriaR::compose_trial_json(trial_data = trial_data)
criteriaR::compose_trial_json(trial_data = trial_data) |> class()
criteriaR::compose_trial_json(trial_data = trial_data) |> names()
trial_json = criteriaR::compose_trial_json(trial_data = trial_data) |>
dplyr::pull(nct_id, json) |>
unique()
head(trial_json, 1)
trial_json = criteriaR::compose_trial_json(trial_data = trial_data) |>
dplyr::select(nct_id, json) |>
unique()
head(trial_json, 1)
?criteriaR::eligibilityLookup
trial_json = criteriaR::eligibilityLookup(json_data = trial_json, dictionaries = dictionaries)
head(trial_json, 1)
trial_json = criteriaR::formPrompt1(eligibility_data = trial_json)
names(trial_json)
trial_json = criteriaR::checkPrompt1Outputs(latest_prompts = trial_json)
?criteriaR::checkPrompt1Outputs
trial_json = criteriaR::checkPrompt1Outputs(latest_prompts = trial_json, db_path = sqlite_con)
criteriaR::checkPrompt1Outputs
devtools::document("~/Documents/GitHub/criteriaR")
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::checkPrompt1Outputs(latest_prompts = trial_json, db_path = db_path)
names(trial_json)
trial_json = criteriaR::eligibility_LLM_lookup(eligibility_data = trial_json, dictionaries = dictionaries)
names(trial_json)
trial_json |>
dplyr::select(cancer_lookup_llm, moldysf_lookup_llm)
trial_json |>
dplyr::select(cancer_lookup_llm, moldysf_lookup_llm) |>
head()
trial_json |>
dplyr::select(cancer_lookup, cancer_lookup_llm) |>
head()
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::formPrompt2(eligibility_data = trial_json, thesaurus = NCIt)
trial_json = criteriaR::formPrompt2(eligibility_data = trial_json, thesaurus = NCIt)
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::formPrompt2(eligibility_data = trial_json, thesaurus = NCIt)
names(trial_json)
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::checkPrompt2Outputs(latest_prompts = trial_json, db_path = db_path)
names(trial_json)
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::createEligibilityLogic(eligibility_data = trial_json)
View(trial_json)
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::unnestEligibilityLogic(eligibility_data = trial_json, raw_trial_data = trial_data)
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::checkEligibilityLogic(eligibility_data = trial_json)
devtools::load_all("~/Documents/GitHub/criteriaR")
trial_json = criteriaR::checkEligibilityLogic(eligibility_data = trial_json)
names(trial_json)
trial_json |>
dplyr::mutate(
across(c(cancer_lookup, moldysf_lookup, cancer_lookup_llm, moldysf_lookup_llm, cancer_lookups_combined, moldysf_lookups_combined), ~ purrr::map_chr(., ~ paste(., collapse = "|")))) |>
dplyr::select(nct_id, json, cancer_lookup, moldysf_lookup, prompt_1, prompt_1_output, cancer_lookup_llm, moldysf_lookup_llm, cancer_lookups_combined, moldysf_lookups_combined, cancer_codes_json, moldysf_codes_json, prompt_2, prompt_2_output, dg_id, dg_title, dg_status, logic, valid_logic, whitelist) |>
head(1)
trial_json <- trial_json |>
dplyr::mutate(
across(c(cancer_lookup, moldysf_lookup, cancer_lookup_llm, moldysf_lookup_llm, cancer_lookups_combined, moldysf_lookups_combined), ~ purrr::map_chr(., ~ paste(., collapse = "|")))) |>
dplyr::select(nct_id, json, cancer_lookup, moldysf_lookup, prompt_1, prompt_1_output, cancer_lookup_llm, moldysf_lookup_llm, cancer_lookups_combined, moldysf_lookups_combined, cancer_codes_json, moldysf_codes_json, prompt_2, prompt_2_output, dg_id, dg_title, dg_status, logic, valid_logic, whitelist)
## save to database
DBI::dbWriteTable(conn = sqlite_con,name = "eligibility", eligibility_flat , overwrite=TRUE)
## save to database
DBI::dbWriteTable(conn = sqlite_con,name = "eligibility", trial_json , overwrite=TRUE)
sqlite_con
db_path = "~/Documents/test_db"
sqlite_con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
DBI::dbWriteTable(conn = sqlite_con,name = "eligibility", trial_json , overwrite=TRUE)
trial_json |>
dplyr::select(nct_id, json, dg_id, dg_title, dg_status, logic, valid_logic, whitelist) |>
unique() |>
head(1) |>
formattable::formattable()
trial_json |>
dplyr::select(nct_id, json, dg_id, dg_title, dg_status, logic, valid_logic, whitelist) |>
unique() |>
head(2) |>
formattable::formattable()
config$db_path
db_path = "~/Documents/test_db.sqlite"
sqlite_con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
DBI::dbWriteTable(conn = sqlite_con,name = "eligibility", trial_json , overwrite=TRUE)
DBI::dbListTables(sqlite_con)
trial_json$json
trial_json$json[1] |>
print()
trial_json$json |> print()
